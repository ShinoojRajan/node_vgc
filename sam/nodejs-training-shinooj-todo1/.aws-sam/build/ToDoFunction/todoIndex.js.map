{
  "version": 3,
  "sources": ["../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/todoIndex.ts", "../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/services/todoService.ts", "../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/routes/create.ts", "../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/routes/get.ts", "../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/routes/update.ts", "../../../../../../../AppData/Local/Temp/1/tmph5_hcekv/src/routes/delete.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from \"aws-lambda\";\r\nimport { handleCreateTodo } from \"./routes/create\";\r\nimport { handleGetTodo } from \"./routes/get\";\r\nimport { handleUpdateTodo } from \"./routes/update\";\r\nimport { handleDeleteTodo } from \"./routes/delete\";\r\n\r\nfunction getRouteKey(event : any):string{\r\n  const { httpMethod, path} = event;\r\n  if (httpMethod === \"POST\" && path === \"/todos\") return \"POST /todos\";\r\n  if (httpMethod === \"GET\" && path === \"/todos\") return \"GET /todos\";\r\n  if (httpMethod === \"PUT\" && /^\\/todos\\/[\\w-]+$/.test(path)) return \"PUT /todos/{id}\";\r\n  if (httpMethod === \"DELETE\" && /^\\/todos\\/[\\w-]+$/.test(path)) return \"DELETE /todos/{id}\";\r\n  if (httpMethod === \"POST\" && path === \"/todos/backup\") return \"POST /todos/backup\";\r\n  return \"\";\r\n}\r\n\r\n\r\nexport const main: APIGatewayProxyHandler=async (event, context, callback)=>{\r\nconst routeKey = getRouteKey(event);\r\nlet result;\r\nswitch (routeKey) {\r\n    case \"POST /todos\":\r\n        result = await handleCreateTodo (event, context, callback); break;\r\n    case \"GET /todos\":\r\n        result = await handleGetTodo (event, context, callback); break;\r\n    case \"PUT /todos/{id}\":\r\n        result = await handleUpdateTodo (event, context, callback); break;\r\n    case \"DELETE /todos/{id}\":\r\n        result = await handleDeleteTodo (event, context, callback); break;\r\n    default:\r\n        result = {\r\n        statusCode: 404,\r\n        body: JSON.stringify({ message: \"Not Found\" }) };\r\n} \r\n\r\nreturn result || { statusCode: 200, body: \"\" };\r\n};", "export interface TodoItem {\r\n  id: number;\r\n  note: string;\r\n}\r\n\r\nlet todos: TodoItem[] = [];\r\n\r\nexport function getTodos(): TodoItem[] {\r\n  return todos;\r\n}\r\n\r\nexport function addTodo(note: string): TodoItem {\r\n  const newTodo: TodoItem = {\r\n    id: todos.length > 0 ? todos[todos.length - 1].id + 1 : 1,\r\n    note\r\n  };\r\n  todos.push(newTodo);\r\n  return newTodo;\r\n}\r\n\r\nexport function updateTodo(id: number, note: string): TodoItem | null {\r\n  const todo = todos.find(t => t.id === id);\r\n  if (todo) {\r\n    todo.note = note;\r\n    return todo;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function removeTodo(id: number): boolean {\r\n  const index = todos.findIndex(t => t.id === id);\r\n  if (index !== -1) {\r\n    todos.splice(index, 1);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n", "import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport { addTodo } from '../services/todoService';\r\n\r\nexport const handleCreateTodo: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n    if (!body.note) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ message: 'Missing note in request body' })\r\n      };\r\n    }\r\n    const newTodo = addTodo(body.note);\r\n    return {\r\n      statusCode: 201,\r\n      body: JSON.stringify(newTodo)\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Internal server error', error: (error as Error).message })\r\n    };\r\n  }\r\n};\r\n", "import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport { getTodos } from '../services/todoService';\r\n\r\nexport const handleGetTodo: APIGatewayProxyHandler = async () => {\r\n  try {\r\n    const todos = getTodos();\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(todos)\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Internal server error', error: (error as Error).message })\r\n    };\r\n  }\r\n};\r\n", "import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport { updateTodo } from '../services/todoService';\r\n\r\nexport const handleUpdateTodo: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const id = event.pathParameters && event.pathParameters.id ? parseInt(event.pathParameters.id, 10) : null;\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n    if (!id || !body.note) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ message: 'Missing id or note in request' })\r\n      };\r\n    }\r\n    const updated = updateTodo(id, body.note);\r\n    if (!updated) {\r\n      return {\r\n        statusCode: 404,\r\n        body: JSON.stringify({ message: 'Todo not found' })\r\n      };\r\n    }\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(updated)\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Internal server error', error: (error as Error).message })\r\n    };\r\n  }\r\n};\r\n", "import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport { removeTodo } from '../services/todoService';\r\n\r\nexport const handleDeleteTodo: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const id = event.pathParameters && event.pathParameters.id ? parseInt(event.pathParameters.id, 10) : null;\r\n    if (!id) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ message: 'Missing id in request' })\r\n      };\r\n    }\r\n    const removed = removeTodo(id);\r\n    if (!removed) {\r\n      return {\r\n        statusCode: 404,\r\n        body: JSON.stringify({ message: 'Todo not found' })\r\n      };\r\n    }\r\n    return {\r\n      statusCode: 204,\r\n      body: ''\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Internal server error', error: (error as Error).message })\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["todoIndex_exports", "__export", "main", "__toCommonJS", "todos", "getTodos", "addTodo", "note", "newTodo", "updateTodo", "id", "todo", "t", "removeTodo", "index", "handleCreateTodo", "event", "body", "newTodo", "addTodo", "error", "handleGetTodo", "todos", "getTodos", "error", "handleUpdateTodo", "event", "id", "body", "updated", "updateTodo", "error", "handleDeleteTodo", "event", "id", "removeTodo", "error", "getRouteKey", "event", "httpMethod", "path", "main", "context", "callback", "routeKey", "result", "handleCreateTodo", "handleGetTodo", "handleUpdateTodo", "handleDeleteTodo"]
}
